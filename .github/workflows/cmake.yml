# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: GooEngine

on:
  push:
    branches: [ "goo-engine-main" ]
  pull_request:
    branches: [ "goo-engine-main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: mac-latest

    steps:
    - uses: actions/checkout@v4
          
    - name: Xcode Sigin
      uses: tamvo0610/xcode-signin@v1
    
    - name: Xcode Notarization
      uses: GuillaumeFalourd/xcode-notarize@v1
    
    - name: Xcode Select Version
      uses: MobileDevOps/xcode-select-version-action@v1.0.0
                         
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake update

    - name: Build
      # Build your program with the given configuration
      run: cmake



